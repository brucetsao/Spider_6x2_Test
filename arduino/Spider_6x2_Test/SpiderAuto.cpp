/*
 *    Module: SpiderAuto.cpp
 *    Author: Jinn-Kwei Guo
 *    Date: 2016/6/10
 *      
 *    Auto Action for Spider
 *        
 */
 
#include "SpiderAuto.h"
#include "ServoPWM.h"
#include <avr/pgmspace.h>

SpiderAuto spiderAuto;


/* Spider leg action:
   array data : time(ms), angle1, angle2, angle3 ...... angle12
  direction of angle>90 : motor 0, 2, 4 : forward
                          motor 1, 3, 5 : in
                          motor 6, 8, 10 : backward
                          motot 7, 9, 11 : out
  angle limit: motor 0, 4, 6, 10 : 0~180/0
               motor 2, 8 : 45~135
               motor 1, 3, 5 : 0~135
               motor 7, 9 ,11: 45~180
*/
const PROGMEM uint16_t spiderAutoAction1[]  = { 
         500, 150,  90,    60,  90,    90,  90,   150,  90,    60,  90,    90,  90, //put leg set 2 
         100, 150,  90,    60,  85,    90,  90,   150,  95,    60,  90,    90,  95,
         100, 150,  90,    60,  80,    90,  90,   150, 100,    60,  90,    90, 100, 
         100, 150,  90,    60,  75,    90,  90,   150, 105,    60,  90,    90, 105, 
         100, 150,  90,    60,  70,    90,  90,   150, 110,    60,  90,    90, 110, 
         100, 150,  90,    60,  65,    90,  90,   150, 110,    60,  90,    90, 115, 
         100, 150,  90,    60,  60,    90,  90,   150, 120,    60,  90,    90, 120, 
         100, 150,  90,    60,  55,    90,  90,   150, 125,    60,  90,    90, 125,
         100, 150,  90,    60,  50,    90,  90,   150, 130,    60,  90,    90, 130, 
         500, 150,  90,    60,  45,    90,  90,   150, 135,    60,  90,    90, 135, //lift leg set 1
         100, 145,  90,    60,  45,    85,  90,   150, 130,    65,  90,    90, 135,
         100, 140,  90,    60,  45,    80,  90,   150, 130,    70,  90,    90, 135,
         100, 135,  90,    60,  45,    75,  90,   150, 130,    75,  90,    90, 135,
         100, 130,  90,    60,  45,    70,  90,   150, 130,    80,  90,    90, 135,
         100, 125,  90,    60,  45,    65,  90,   150, 130,    85,  90,    90, 135,
         100, 120,  90,    60,  45,    60,  90,   150, 130,    90,  90,    90, 135,
         100, 115,  90,    60,  45,    55,  90,   150, 130,    95,  90,    90, 135,
         100, 110,  90,    60,  45,    50,  90,   150, 130,   100,  90,    90, 135,
         100, 105,  90,    60,  45,    45,  90,   150, 130,   105,  90,    90, 135,
         100, 100,  90,    60,  45,    40,  90,   150, 130,   110,  90,    90, 135,  
         100,  95,  90,    60,  45,    35,  90,   150, 130,   115,  90,    90, 135,
         500,  90,  90,    60,  45,    30,  90,   150, 130,   120,  90,    90, 135, //backward leg set 2
         100,  90,  90,    70,  45,    30,  90,   140, 130,   120,  90,    80, 135,
         100,  90,  90,    80,  45,    30,  90,   130, 130,   120,  90,    70, 135,
         100,  90,  90,    90,  45,    30,  90,   120, 130,   120,  90,    60, 135,
         100,  90,  90,   100,  45,    30,  90,   110, 130,   120,  90,    50, 135,
         100,  90,  90,   110,  45,    30,  90,   100, 130,   120,  90,    40, 135,  
         500,  90,  90,   120,  45,    30,  90,    90, 130,   120,  90,    30, 135, //forward leg set 1
         100,  90,  90,   120,  45,    30,  90,    90, 130,   120,  90,    30, 130,
         100,  90,  90,   120,  60,    30,  90,    90, 120,   120,  90,    30, 120,
         100,  90,  90,   120,  70,    30,  90,    90, 110,   120,  90,    30, 110,
         100,  90,  90,   120,  80,    30,  90,    90, 100,   120,  90,    30, 100,
         500,  90,  90,   120,  90,    30,  90,    90,  90,   120,  90,    30,  90, //21 put leg set 1
         100,  90,  80,   120,  90,    30,  80,    90,  90,   120, 100,    30,  90,
         100,  90,  70,   120,  90,    30,  70,    90,  90,   120, 110,    30,  90,
         100,  90,  60,   120,  90,    30,  60,    90,  90,   120, 120,    30,  90,
         100,  90,  50,   120,  90,    30,  50,    90,  90,   120, 130,    30,  90,        
         500,  90,  45,   120,  90,    30,  45,    90,  90,   120, 135,    30,  90, //lift leg set 2
         100,  90,  45,   110,  90,    30,  45,   100,  90,   120, 135,    40,  90,
         100,  90,  45,   100,  90,    30,  45,   110,  90,   120, 135,    50,  90,
         100,  90,  45,    90,  90,    30,  45,   120,  90,   120, 135,    60,  90,
         100,  90,  45,    80,  90,    30,  45,   130,  90,   120, 135,    70,  90,
         100,  90,  45,    70,  90,    30,  45,   140,  90,   120, 135,    80,  90,        
         500,  90,  45,    60,  90,    30,  45,   150,  90,   120, 135,    90,  90, //backward leg set 1
         100, 100,  45,    60,  90,    40,  45,   150,  90,   110, 135,    90,  90, 
         100, 110,  45,    60,  90,    50,  45,   150,  90,   100, 135,    90,  90, 
         100, 120,  45,    60,  90,    60,  45,   150,  90,    90, 135,    90,  90, 
         100, 130,  45,    60,  90,    70,  45,   150,  90,    80, 135,    90,  90, 
         100, 140,  45,    60,  90,    80,  45,   150,  90,    70, 135,    90,  90, 
         500, 150,  45,    60,  90,    90,  45,   150,  90,    60, 135,    90,  90, //forward leg set 2  
         100, 150,  50,    60,  90,    90,  50,   150,  90,    60, 130,    90,  90,
         100, 150,  60,    60,  90,    90,  60,   150,  90,    60, 120,    90,  90,
         100, 150,  70,    60,  90,    90,  70,   150,  90,    60, 110,    90,  90,
         100, 150,  80,    60,  90,    90,  80,   150,  90,    60, 100,    90,  90    
        //repeat put leg set 2         
    };
const PROGMEM uint16_t spiderAutoAction2[] = { 
         250,  30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 
         250,  90, 90, 90, 90, 90, 90, 30, 30, 30, 30, 30, 30,
         250,  90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
         250, 150,150,150,150,150,150, 90, 90, 90, 90, 90, 90,
         250, 150,150,150,150,150,150,150,150,150,150,150,150,
         250, 150,150,150,150,150,150, 90, 90, 90, 90, 90, 90,
         250,  90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
         250,  90, 90, 90, 90, 90, 90, 30, 30, 30, 30, 30, 30 
    };
const PROGMEM uint16_t spiderAutoAction3[]= { 
         2000,   0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
         2000,  90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90,
         2000, 180,180,180,180,180,180,180,180,180,180,180,180
    };


SpiderAuto::SpiderAuto() //constructor
{
    moveStep  = 0;
    actionType = 0; // no action
}

void SpiderAuto::beginAction(int actionType)
{ 
    this->actionType = actionType;
    moveStep  = 0;  
}


void SpiderAuto::nextMove()
{  
    int totalSteps=0;
    if (actionType==1) {
        totalSteps = sizeof(spiderAutoAction1)/sizeof(int)/13;
        pMoveTask->tickInterval = (unsigned long)pgm_read_word_near(spiderAutoAction1+moveStep*13)*1000L;
        for (int i=0; i<NumberOfServo; i++) {
            motor.setAngle(i,pgm_read_word_near(spiderAutoAction1+moveStep*13+(i+1)));
        }
        if (++moveStep>=totalSteps) moveStep=0;
    }
    if (actionType==2) {
        totalSteps = sizeof(spiderAutoAction2)/sizeof(int)/13;
        pMoveTask->tickInterval = (unsigned long)pgm_read_word_near(spiderAutoAction2+moveStep*13)*1000L;
        for (int i=0; i<NumberOfServo; i++) {
            motor.setAngle(i,pgm_read_word_near(spiderAutoAction2+moveStep*13+(i+1)));
        }
        if (++moveStep>=totalSteps) moveStep=0;
    } 
    if (actionType==3) {
       totalSteps = sizeof(spiderAutoAction3)/sizeof(int)/13;
        pMoveTask->tickInterval = (unsigned long)pgm_read_word_near(spiderAutoAction3+moveStep*13)*1000L;
        for (int i=0; i<NumberOfServo; i++) {
            motor.setAngle(i,pgm_read_word_near(spiderAutoAction3+moveStep*13+(i+1)));
        }
        if (++moveStep>=totalSteps) moveStep=0;
    }
}

